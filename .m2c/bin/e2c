#!/bin/bash

declare -r e2c_version="0.3.2"
declare -r e2c_os="$(uname -s | awk '{print tolower($0)}')"
declare -r e2c_global_dir="$(echo ~/.m2c)"
declare e2c_loading_pid=

e2c_logo() {
    local logo='
                  #######################################
                  #######################################
                  #######################################
                  #######################################
                  #######################################
                  #######################################
                  #########         #####         #######
                  #######    ####(  ###    ####    ######
                  #######    #########    #####    ######
                  ########       #####   **      .#######
                  ///////////       //        ///////////
                  ///////////////    /    ///////////////
                  ///////  .////    ///    .////  ///////
                  ///////          /////          *//////
                  ///////////////////////////////////////
                  ///////////////////////////////////////
                  ///////////////////////////////////////
                  ///////////////////////////////////////
                  ///////////////////////////////////////
    '

    echo -e "\033[1;34m$logo
                                Emma2click
                              Docker Magento
                          environment and toolset
                                  v$e2c_version
\033[0m"
}

e2c_loading() {
    tput civis
    e2c_start_spinner &
    e2c_loading_pid=$!
    sleep 0.1
}

e2c_start_spinner() {
    local sp=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    #local sp=('/' '—' '\' '|')
    #local sp=('◐' '◓' '◑' '◒')
    #local sp=('◢' '◣' '◤' '◥')

    printf "\033[1;33m"

    while [[ "$(ps a | awk '{print $1}' | grep $$)" ]]; do
        for i in "${sp[@]}"; do
            echo -en "\b$i"
            sleep 0.1
        done
    done
}

e2c_stop_spinner() {
    if [[ -n ${e2c_loading_pid} ]]; then
        kill ${e2c_loading_pid}
        wait ${e2c_loading_pid} >/dev/null 2>&1
        e2c_loading_pid=
    fi

    printf "\b\033[0m"
}

e2c_trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

e2c_msg() {
    echo -en "\033[0;32m$@\033[0m"
}

e2c_info() {
    echo -en "\033[0;33m$@\033[0m"
}

e2c_info_bold() {
    echo -en "\033[1;33m$@\033[0m"
}

e2c_error() {
    echo -en "\033[0;31m$@\033[0m"
}

e2c_error_bold() {
    echo -en "\033[1;31m$@\033[0m"
}

e2c_result() {
    local res=$1 \
        noexit=$2 \
        error

    e2c_stop_spinner >/dev/null 2>&1
    tput cnorm

    if [[ $1 -eq 0 ]]; then
        e2c_info_bold "\b✔\n"
    else
        e2c_error_bold "\b✘\n"

        if [[ -f "$e2c_log" ]]; then
            error="$(echo $(cat "$e2c_log"))"
            [[ -n ${error} ]] && e2c_error "$error\n"
        fi

        [[ -z ${noexit} ]] && exit 1
    fi
}

e2c_ask_bool() {
    local message=$(e2c_msg "$1") \
    only_y=$2 \
    opts \
    res

    tput cnorm
    stty echo

    if [[ -z ${only_y} ]]; then
        opts="[Y/n]"
    else
        opts="[Y]"
    fi

    while :; do
        read -n 1 -srp "$(e2c_msg "$message $(e2c_info_bold "$opts")") " res
        e2c_erase_current_line
        if [[ "$res" == "Y" || "$res" == "y" ]]; then
            e2c_msg "$message $(e2c_info_bold "[$res]")\n"
            res=1
            break
        elif [[ -z ${only_y} ]] && [[ "$res" == "N" || "$res" == "n" ]]; then
            e2c_msg "$message $(e2c_info_bold "[$res]")\n"
            res=
            break
        fi
    done

    e2c_res=${res}

    stty -echo
    tput civis
}

e2c_ask_text() {
    local message=$1 \
        default=$2 \
        error=$3 \
        error_info=$4 \
        validate=$5 \
        validate_value=() \
        res res_count \
        error_count valid=1

    shift
    shift
    shift
    shift
    shift

    validate_value=("$@")

    tput cnorm
    stty echo

    temp_term=${TERM}
    TERM=vt100

    while [[ -z ${res} || -z ${valid} ]]; do
        valid=
        error_count=0

        exec 5>&1

        message=$(e2c_msg "$message")

        if [[ -n ${default} ]]; then
            echo -e "$message $(e2c_info_bold "[$default]")"
        else
            echo -e "$message"
        fi

        if [[ -n ${res} && -z ${valid} ]]; then
            error_count="$(echo -en "$(
                e2c_error "$(printf "$error" "$res")\n"
                [[ -n ${error_info} ]] && e2c_error "$error_info"
            )" | tee >(cat - >&5))"
            error_count="$(echo -en "$error_count" | awk 'END { print NR }')"
        fi

        read -r res
        res_count=$(echo "$res" | awk 'END { print NR }')

        [[ ${error_count} -eq 0 ]] && ((res_count++))

        while IFS= read line; do
            res="$line"
        done < <(printf '%s\n' "$res")

        e2c_erase_prev_lines $(((res_count + error_count)))

        res=$(e2c_trim "$res" | tr -dc '[:print:]')

        if [[ -z ${res} ]]; then
            res="$default"
        fi

        if ${validate} "$res" "${validate_value[@]}"; then
            valid=1
            e2c_res="$res"
        fi
    done

    TERM=${temp_term}

    exec 5>&-

    echo -e "$message $(e2c_info_bold "[$res]")"

    stty -echo
    tput civis
}

e2c_erase_current_line() {
    echo -ne "\033[999D\033[K\033[999D"
}

e2c_erase_prev_lines() {
    local count=${1:-1}

    while ((count > 0)); do
        tput cuu 1 && tput el
        ((count--))
    done
}

e2c_in_array() {
    local entry match="$1"
    shift
    for entry; do
        [[ "$entry" == "$match" ]] && return 0
    done
    return 1
}

e2c_requirements() {
    local test pass=1

    e2c_info_bold "\n[Checking requirements]\n\n"

    e2c_msg "OS compatibility check.................................................  "
    e2c_loading

    case ${e2c_os} in
    darwin | linux)
        e2c_result 0
        ;;
    *)
        echo "Currently we are not supporting $e2c_os based OS yet." >"$e2c_log"
        e2c_result 1 1
        pass=0
        ;;
    esac

    e2c_msg "Docker installation check..............................................  "
    e2c_loading
    hash docker 2>/dev/null
    test=$?

    [[ "$test" == "1" ]] && echo "Docker command line interface was not found." >"$e2c_log"

    e2c_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    e2c_msg "Docker-compose installation check......................................  "
    e2c_loading
    hash docker-compose 2>/dev/null
    test=$?

    [[ "$test" == "1" ]] && echo "Docker-compose command line interface was not found." >"$e2c_log"

    e2c_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    test=0
    e2c_msg "Ports 80, 443 and 53 availability check................................  "
    e2c_loading

    local ports=

    if [[ -z "$(docker ps \
        --filter "label=com.docker.compose.project=e2c" \
        --filter "label=com.docker.compose.service=traefik" \
        -q)" ]]; then
        if lsof -PiTCP:80 -sTCP:LISTEN -t >/dev/null 2>&1; then
            ports="TCP 80"
        fi

        if lsof -PiTCP:443 -sTCP:LISTEN -t >/dev/null 2>&1; then
            if [[ -z ${ports} ]]; then
                ports="TCP 443"
            else
                ports="$ports, 443"
            fi
        fi
    fi

    if [[ -n ${ports} ]]; then
        test=1
        echo "$ports already used by some other service.\n" >"$e2c_log"
    fi

    e2c_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    if [[ ${pass} -eq 0 ]]; then
        exit 1
    fi

    e2c_msg "Password required to trust the CA certificate and create symlinks......  "
    e2c_loading
    e2c_result 0
    tput cnorm
    while ! sudo -p "$(printf "\033[0mPassword:")$(printf "\033[1;31m%s" " ")" true; do
        exit 1
    done
    tput civis
    e2c_erase_prev_lines 1
}

e2c_install() {
    local archive test

    e2c_info_bold "\n[Installing commands]\n\n"

    e2c_msg "Locating archive.......................................................  "
    e2c_loading
    archive=$(awk '/^__ARCHIVED__/ {print NR + 1; exit 0; }' "${0}")
    test=$?
    e2c_result ${test}

    e2c_msg "Extracting data........................................................  "
    e2c_loading 2
    tail -n+${archive} "${0}" | tar -xzp -C ~ && >"$e2c_log" 2>&1
    test=$?
    if [[ "$test" == "0" ]]; then
        sudo ln -sf "$e2c_global_dir"/bin/e2c /usr/local/bin/e2c

        if [[ ! -f "$e2c_global_dir"/ssl/config/v3_ext.conf ]]; then
            mv "$e2c_global_dir"/ssl/config/v3_ext.blank.conf "$e2c_global_dir"/ssl/config/v3_ext.conf
        else
            rm -f "$e2c_global_dir"/ssl/config/v3_ext.blank.conf
        fi
    fi
    e2c_result ${test}

    if [[ ! -f "$e2c_global_dir"/ssl/certs/rootCA.crt ]] || [[ ! -f "$e2c_global_dir"/ssl/private/rootCA.key ]]; then
        e2c_info_bold "\n[Installing CA certificate]\n\n"

        if [[ "$e2c_os" == "darwin" ]]; then
            pass="e2c"
        else
            pass="e2c0"
        fi

        e2c_msg "Generating private key for CA certificate..............................  "
        e2c_loading
        mkdir -p "$e2c_global_dir"/ssl/{certs,crl,new,private,serial} >"$e2c_log" 2>&1 &&
            openssl genrsa -aes256 -passout pass:${pass} -out "$e2c_global_dir"/ssl/private/rootCA.key 4096 >"$e2c_log" 2>&1
        test=$?
        e2c_result ${test}

        e2c_msg "Signing CA certificate.................................................  "
        e2c_loading
        openssl req -new -x509 -nodes -sha256 -days 825 \
            -passin pass:${pass} -subj "/O=Emma2click/OU=IT/CN=e2c.local" \
            -config "$e2c_global_dir"/ssl/config/rootca.conf \
            -key "$e2c_global_dir"/ssl/private/rootCA.key \
            -out "$e2c_global_dir"/ssl/certs/rootCA.crt >"$e2c_log" 2>&1
        test=$?
        e2c_result ${test}

        e2c_msg "Trusting root CA certificate...........................................  "
        e2c_loading
        case "$e2c_os" in
        darwin)
            sudo security delete-certificate -c 'e2c.local' >/dev/null 2>&1
            sudo security add-trusted-cert -d -r trustRoot \
                -k /Library/Keychains/System.keychain "$e2c_global_dir"/ssl/certs/rootCA.crt >"$e2c_log" 2>&1
            test=$?
            ;;
        linux)
            if [[ -d /usr/local/share/ca-certificates ]] && [[ ! -f /usr/local/share/ca-certificates/e2c-root-ca.crt ]]; then
                yes | sudo cp -rf "$e2c_global_dir"/ssl/certs/rootCA.crt \
                    /usr/local/share/ca-certificates/e2c-root-ca.crt >"$e2c_log" 2>&1 &&
                    sudo update-ca-certificates >"$e2c_log" 2>&1
                test=$?
            elif [[ -d /etc/pki/ca-trust/source/anchors ]] && [[ ! -f /etc/pki/ca-trust/source/anchors/e2c-root-ca.crt ]]; then
                yes | sudo cp -rf "$e2c_global_dir"/ssl/certs/rootCA.crt \
                    /etc/pki/ca-trust/source/anchors/e2c-root-ca.crt >"$e2c_log" 2>&1 &&
                    sudo update-ca-trust >"$e2c_log" 2>&1 &&
                    sudo update-ca-trust enable >"$e2c_log" 2>&1
                test=$?
            else
                echo "Currently we are not supporting $e2c_os based OS yet." >"$e2c_log"
                test=1
            fi
            ;;
        esac
        e2c_result ${test}
    fi

    case ${e2c_os} in
    darwin)
        if [[ ! -f /etc/resolver/test || "$(cat /etc/resolver/test)" != "nameserver 127.0.0.1" ]]; then
            e2c_info_bold "\n[Configuring .test domains resolver]\n\n"

            e2c_msg "Creating the resolver file.............................................  "
            e2c_loading
            sudo mkdir -p /etc/resolver &&
                sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/test'
            e2c_result $?
        fi

        if [[ ! -f "$e2c_global_dir"/mutagen/mutagen || "$(echo "$("$e2c_global_dir"/mutagen/mutagen version)")" != "0.10.0" ]]; then
            e2c_info_bold "\n[Installing Mutagen for docker sync performance]\n\n"
            mkdir -p "$e2c_global_dir"/mutagen >"$e2c_log" 2>&1
            curl -L \
                "https://github.com/mutagen-io/mutagen/releases/download/v0.10.0/mutagen_darwin_amd64_v0.10.0.tar.gz" |
                tar xzf - -o -C "$e2c_global_dir"/mutagen/
            chmod 0755 "$e2c_global_dir"/mutagen/mutagen
        fi
        ;;
    esac
}

e2c_on_exit() {
    e2c_stop_spinner
    stty echo
    tput cnorm
    echo

    if [[ "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")" != "e2c" ]]; then
        rm -- "$0"
    fi
}

trap e2c_on_exit EXIT

e2c_log="$e2c_global_dir"/log
touch "$e2c_log"

if [[ "$0" != "/usr/local/bin/e2c" ]]; then
    e2c_logo

    if [[ ! -f "$e2c_global_dir"/build ]]; then
        message="Install Emma2click Docker Magento environment and toolset to your system?"
    else
        e2c_is_update=1
        e2c_res="$(e2c --version 2>/dev/null | tr -dc '[:print:]' | sed 's/\[0m\[?12l\[?25h//')"

        if [[ "$e2c_res" == "$e2c_version" ]]; then
            message="Hooray! You have the latest version of Emma2click toolset. Reinstall?"
        else
            message="Emma2click toolset v$e2c_res is found on your system. Update it to v$e2c_version?"
        fi
    fi

    e2c_ask_bool "$(echo -n "$message")"

    if [[ -z ${e2c_res} ]]; then
        exit 0
    fi

    e2c_requirements
    rm -rf "$e2c_global_dir"/{bin,completions,docker,functions,local,traefik,www,build} >/dev/null 2>&1
    e2c_install
    . "$e2c_global_dir"/functions/e2c

    e2c_global_load_env

    e2c_sign "e2c.test"

    e2c_global up

    e2c_info_bold "\n[Installation finished]\n\n"
    e2c_msg "Emma2click toolset is successfully installed! \n\nRun \`e2c --help\` command for usage information. \nVisit local https://e2c.test to check useful links to included services.\n\n"

    if [[ -z ${e2c_is_update} ]]; then
        e2c_ask_bool "Initialize new project in the current directory?"

        if [[ -n ${e2c_res} ]]; then
            e2c_init
        fi
    fi
else
    . "$e2c_global_dir"/functions/e2c
    declare -r e2c_project_dir="$(e2c_get_project_dir)"
    e2c_log="$e2c_project_dir"/.m2c/log

    e2c_load_env

    case "$1" in
    global)
        shift
        e2c_log="$e2c_global_dir"/log
        e2c_global $@
        ;;
    init)
        shift
        e2c_init $@
        ;;
    sign)
        shift
        e2c_sign $@
        ;;
    --version)
        echo -n "$e2c_version"
        ;;
    --help)
        e2c_help
        ;;
    *)
        case "$1" in
        up | down)
            e2c_local_project_check_dir
            e2c_local $@
            ;;
        add | info | remove | restart | start | status | stop | update)
            e2c_local_project_check
            e2c_local $@
            ;;
        bash | cli | composer | db | grunt | magento | m | magerun | mr | mutagen | node | npm | pull | push | redis | share | sync | varnish | urn)
            e2c_local_active_project_check

            e2c_res=$1
            shift

            if [[ "$e2c_res" == "m" ]]; then
                e2c_res="magento"
            elif [[ "$e2c_res" == "mr" ]]; then
                e2c_res="magerun"
            fi

            [[ $(type -t e2c_${e2c_res}) == "function" ]] && e2c_${e2c_res} $@
            ;;
        *)
            if [[ "$1" != "" ]]; then
                e2c_error "Unknown argument \`$@\`. Run \`e2c --help\` for usage information.\n"
                exit 1
            else
                e2c_help
            fi
            ;;
        esac
        ;;
    esac
fi
